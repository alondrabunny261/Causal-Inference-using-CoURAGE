netcdf crgpops1mS3.b1.20250629.000030.custom {
dimensions:
	time = UNLIMITED ; // (1440 currently)
	diameter_optical = 16 ;
	diameter_optical_AS = 16 ;
	bound = 2 ;
variables:
	int base_time ;
		base_time:string = "2025-06-29 00:00:00 0:00" ;
		base_time:long_name = "Base time in Epoch" ;
		base_time:units = "seconds since 1970-1-1 0:00:00 0:00" ;
		base_time:ancillary_variables = "time_offset" ;
	double time_offset(time) ;
		time_offset:long_name = "Time offset from base_time" ;
		time_offset:units = "seconds since 2025-06-29 00:00:00 0:00" ;
		time_offset:ancillary_variables = "base_time" ;
	double time(time) ;
		time:long_name = "Time offset from midnight" ;
		time:units = "seconds since 2025-06-29 00:00:00 0:00" ;
		time:bounds = "time_bounds" ;
		time:standard_name = "time" ;
	double time_bounds(time, bound) ;
		time_bounds:long_name = "Time cell bounds" ;
		time_bounds:bound_offsets = -30., 30. ;
	float diameter_optical(diameter_optical) ;
		diameter_optical:long_name = "Optical diameter bin midpoints (PSL)" ;
		diameter_optical:units = "nm" ;
		diameter_optical:bounds = "diameter_optical_bounds" ;
		diameter_optical:calibration = "Geometric mean of manufacturer specified bin bounds calibrated with polystyrene latex spheres (PSL)" ;
		diameter_optical:equation = "SQRT(diameter_optical_bounds[i][0] * diameter_optical_bounds[i][1])" ;
	float diameter_optical_bounds(diameter_optical, bound) ;
		diameter_optical_bounds:long_name = "Optical diameter bin boundaries (PSL)" ;
		diameter_optical_bounds:calibration = "Manufacturer specified bin bounds calibrated with polystyrene latex spheres (PSL)" ;
	float dlogDp(diameter_optical) ;
		dlogDp:long_name = "Relative width of bins (PSL)" ;
		dlogDp:units = "1" ;
		dlogDp:equation = "log10(diameter_optical_bounds[i][1]/diameter_optical_bounds[i][0])" ;
	float dN_dlogDp(time, diameter_optical) ;
		dN_dlogDp:long_name = "Particle size distribution (PSL)" ;
		dN_dlogDp:units = "1/cm^3" ;
		dN_dlogDp:missing_value = -9999.f ;
		dN_dlogDp:comment = "dN_dlogDp is the aerosol number size distribution where the number of particles per bin (dN) have been divided by the bin-width in log10 space (dlogDp).  This simplifies comparison of size distributions from instruments with different bin spacing." ;
		dN_dlogDp:calibration = "Calibrated with polystyrene latex spheres (PSL)" ;
		dN_dlogDp:equation = "(raw_bin_counts/sample_flow_rate)/dlogDp;" ;
	double dD_to_dSA(diameter_optical) ;
		dD_to_dSA:long_name = "Particle surface area (PSL)" ;
		dD_to_dSA:units = "nm^2" ;
		dD_to_dSA:comment = "Surface area of one particle assuming spherical particles with unity shape factor and optical properties of PSL particles. That is, SA = 4*pi*R^2 = pi*D^2 for the diameter of each individual bin." ;
		dD_to_dSA:equation = "pi * diameter_optical^2" ;
	double total_SA_conc(time) ;
		total_SA_conc:long_name = "Total surface area concentration from integrated size distribution (PSL)" ;
		total_SA_conc:units = "nm^2/cm^3" ;
		total_SA_conc:missing_value = -9999. ;
		total_SA_conc:comment = "Integrated surface area concentration assuming spherical particles with unity shape factor and optical properties of PSL particles." ;
		total_SA_conc:equation = "SUM(raw_bin_counts * dD_to_dSA)/sample_flow_rate" ;
	double dD_to_dV(diameter_optical) ;
		dD_to_dV:long_name = "Particle volume (PSL)" ;
		dD_to_dV:units = "nm^3" ;
		dD_to_dV:comment = "Volume of one particle assuming spherical particles with unity shape factor and optical properties of PSL particles. That is, V = 4/3*pi*R^3 = pi/6*D^3 for the diameter of each individual bin." ;
		dD_to_dV:equation = "(pi/6) * diameter_optical^3" ;
	double total_V_conc(time) ;
		total_V_conc:long_name = "Total volume concentration from integrated size distribution (PSL)" ;
		total_V_conc:units = "nm^3/cm^3" ;
		total_V_conc:missing_value = -9999. ;
		total_V_conc:comment = "Integrated volume concentration assuming spherical particles with unity shape factor and optical properties of PSL particles." ;
		total_V_conc:equation = "SUM(raw_bin_counts * dD_to_dV)/sample_flow_rate" ;
	float diameter_optical_AS(diameter_optical_AS) ;
		diameter_optical_AS:long_name = "Optical diameter bin midpoints (AS)" ;
		diameter_optical_AS:units = "nm" ;
		diameter_optical_AS:bounds = "diameter_optical_bounds_AS" ;
		diameter_optical_AS:calibration = "Geometric mean of bin bounds based on calibration with size-selected ammonium sulfate (AS) n = 1.55 + 0i and a scaled Mie model" ;
		diameter_optical_AS:equation = "SQRT(diameter_optical_bounds_AS[i][0] * diameter_optical_bounds_AS[i][1])" ;
	float diameter_optical_bounds_AS(diameter_optical_AS, bound) ;
		diameter_optical_bounds_AS:long_name = "Optical diameter bin boundaries (AS)" ;
		diameter_optical_bounds_AS:units = "nm" ;
		diameter_optical_bounds_AS:calibration = "Based on calibration with size-selected ammonium sulfate (AS) n = 1.55 + 0i and a scaled Mie model" ;
	float dlogDp_AS(diameter_optical_AS) ;
		dlogDp_AS:long_name = "Relative width of bins (AS)" ;
		dlogDp_AS:units = "1" ;
		dlogDp_AS:equation = "log10(diameter_optical_bounds_AS[i][1]/diameter_optical_bounds_AS[i][0])" ;
	float dN_dlogDp_AS(time, diameter_optical_AS) ;
		dN_dlogDp_AS:long_name = "Particle size distribution (AS)" ;
		dN_dlogDp_AS:units = "1/cm^3" ;
		dN_dlogDp_AS:missing_value = -9999.f ;
		dN_dlogDp_AS:comment = "dN_dlogDp is the aerosol number size distribution where the number of particles per bin (dN) have been divided by the bin-width in log10 space (dlogDp).  This simplifies comparison of size distributions from instruments with different bin spacing." ;
		dN_dlogDp_AS:calibration = "Based on calibration with size-selected ammonium sulfate (AS) n = 1.55 + 0i and a scaled Mie model" ;
		dN_dlogDp_AS:equation = "(raw_bin_counts/sample_flow_rate)/dlogDp_AS;" ;
	double dD_to_dSA_AS(diameter_optical_AS) ;
		dD_to_dSA_AS:long_name = "Particle surface area (AS)" ;
		dD_to_dSA_AS:units = "nm^2" ;
		dD_to_dSA_AS:comment = "Surface area of one particle assuming spherical particles with unity shape factor and optical properties of ammonium sulfate particles. That is, SA = 4*pi*R^2 = pi*D^2 for the diameter of each individual bin." ;
		dD_to_dSA_AS:equation = "pi * diameter_optical^2" ;
	double total_SA_conc_AS(time) ;
		total_SA_conc_AS:long_name = "Total surface area concentration from integrated size distribution (AS)" ;
		total_SA_conc_AS:units = "nm^2/cm^3" ;
		total_SA_conc_AS:missing_value = -9999. ;
		total_SA_conc_AS:comment = "Integrated surface area concentration assuming spherical particles with unity shape factor and optical properties of ammonium sulfate particles." ;
		total_SA_conc_AS:equation = "SUM(raw_bin_counts * dD_to_dSA_AS)/sample_flow_rate" ;
	double dD_to_dV_AS(diameter_optical_AS) ;
		dD_to_dV_AS:long_name = "Particle volume (AS)" ;
		dD_to_dV_AS:units = "nm^3" ;
		dD_to_dV_AS:comment = "Volume of one particle assuming spherical particles with unity shape factor and optical properties of ammonium sulfate particles. That is, V = 4/3*pi*R^3 = pi/6*D^3 for the diameter of each individual bin." ;
		dD_to_dV_AS:equation = "(pi/6) * diameter_optical^3" ;
	double total_V_conc_AS(time) ;
		total_V_conc_AS:long_name = "Total volume concentration from integrated size distribution (AS)" ;
		total_V_conc_AS:units = "nm^3/cm^3" ;
		total_V_conc_AS:missing_value = -9999. ;
		total_V_conc_AS:comment = "Integrated volume concentration assuming spherical particles with unity shape factor and optical properties of ammonium sulfate particles." ;
		total_V_conc_AS:equation = "SUM(raw_bin_counts * dD_to_dV_AS)/sample_flow_rate" ;
	float total_N_conc(time) ;
		total_N_conc:long_name = "Total number concentration" ;
		total_N_conc:units = "1/cm^3" ;
		total_N_conc:missing_value = -9999.f ;
		total_N_conc:equation = "SUM(raw_bin_counts)/sample_flow_rate" ;
		total_N_conc:ancillary_variables = "qc_total_N_conc" ;
	int qc_total_N_conc(time) ;
		qc_total_N_conc:long_name = "Quality check results on variable: Total number concentration" ;
		qc_total_N_conc:units = "1" ;
		qc_total_N_conc:standard_name = "quality_flag" ;
		qc_total_N_conc:description = "This variable contains bit-packed integer values, where each bit represents a QC test on the data. Non-zero bits indicate the QC condition given in the description for those bits; a value of 0 (no bits set) indicates the data has not failed any QC tests." ;
		qc_total_N_conc:fail_min = 0.f ;
		qc_total_N_conc:flag_method = "bit" ;
		qc_total_N_conc:bit_1_description = "Value is equal to missing_value" ;
		qc_total_N_conc:bit_1_assessment = "Bad" ;
		qc_total_N_conc:bit_2_description = "Value is less than fail_min" ;
		qc_total_N_conc:bit_2_assessment = "Bad" ;
	float sample_temperature(time) ;
		sample_temperature:long_name = "Sample temperature" ;
		sample_temperature:units = "degC" ;
		sample_temperature:missing_value = -9999.f ;
		sample_temperature:ancillary_variables = "qc_sample_temperature" ;
	int qc_sample_temperature(time) ;
		qc_sample_temperature:long_name = "Quality check results on variable: Sample temperature" ;
		qc_sample_temperature:units = "1" ;
		qc_sample_temperature:standard_name = "quality_flag" ;
		qc_sample_temperature:description = "This variable contains bit-packed integer values, where each bit represents a QC test on the data. Non-zero bits indicate the QC condition given in the description for those bits; a value of 0 (no bits set) indicates the data has not failed any QC tests." ;
		qc_sample_temperature:fail_min = -50.f ;
		qc_sample_temperature:fail_max = 100.f ;
		qc_sample_temperature:flag_method = "bit" ;
		qc_sample_temperature:bit_1_description = "Value is equal to missing_value" ;
		qc_sample_temperature:bit_1_assessment = "Bad" ;
		qc_sample_temperature:bit_2_description = "Value is less than fail_min" ;
		qc_sample_temperature:bit_2_assessment = "Bad" ;
		qc_sample_temperature:bit_3_description = "Value is greater than fail_max" ;
		qc_sample_temperature:bit_3_assessment = "Bad" ;
	float sample_temperature_std(time) ;
		sample_temperature_std:long_name = "Standard deviation of sample temperature" ;
		sample_temperature_std:units = "degC" ;
		sample_temperature_std:missing_value = -9999.f ;
	float sample_relative_humidity(time) ;
		sample_relative_humidity:long_name = "Relative humidity" ;
		sample_relative_humidity:units = "%" ;
		sample_relative_humidity:missing_value = -9999.f ;
		sample_relative_humidity:ancillary_variables = "qc_sample_relative_humidity" ;
	int qc_sample_relative_humidity(time) ;
		qc_sample_relative_humidity:long_name = "Quality check results on variable: Relative humidity" ;
		qc_sample_relative_humidity:units = "1" ;
		qc_sample_relative_humidity:standard_name = "quality_flag" ;
		qc_sample_relative_humidity:description = "This variable contains bit-packed integer values, where each bit represents a QC test on the data. Non-zero bits indicate the QC condition given in the description for those bits; a value of 0 (no bits set) indicates the data has not failed any QC tests." ;
		qc_sample_relative_humidity:fail_min = 0.f ;
		qc_sample_relative_humidity:fail_max = 100.f ;
		qc_sample_relative_humidity:flag_method = "bit" ;
		qc_sample_relative_humidity:bit_1_description = "Value is equal to missing_value" ;
		qc_sample_relative_humidity:bit_1_assessment = "Bad" ;
		qc_sample_relative_humidity:bit_2_description = "Value is less than fail_min" ;
		qc_sample_relative_humidity:bit_2_assessment = "Bad" ;
		qc_sample_relative_humidity:bit_3_description = "Value is greater than fail_max" ;
		qc_sample_relative_humidity:bit_3_assessment = "Bad" ;
	float sample_relative_humidity_std(time) ;
		sample_relative_humidity_std:long_name = "Standard deviation of relative humidity" ;
		sample_relative_humidity_std:units = "%" ;
		sample_relative_humidity_std:missing_value = -9999.f ;
	float sample_flow_rate(time) ;
		sample_flow_rate:long_name = "Sample flow rate" ;
		sample_flow_rate:units = "cm^3/s" ;
		sample_flow_rate:missing_value = -9999.f ;
		sample_flow_rate:ancillary_variables = "qc_sample_flow_rate" ;
	int qc_sample_flow_rate(time) ;
		qc_sample_flow_rate:long_name = "Quality check results on variable: Sample flow rate" ;
		qc_sample_flow_rate:units = "1" ;
		qc_sample_flow_rate:standard_name = "quality_flag" ;
		qc_sample_flow_rate:description = "This variable contains bit-packed integer values, where each bit represents a QC test on the data. Non-zero bits indicate the QC condition given in the description for those bits; a value of 0 (no bits set) indicates the data has not failed any QC tests." ;
		qc_sample_flow_rate:fail_min = 0.25f ;
		qc_sample_flow_rate:flag_method = "bit" ;
		qc_sample_flow_rate:bit_1_description = "Value is equal to missing_value" ;
		qc_sample_flow_rate:bit_1_assessment = "Bad" ;
		qc_sample_flow_rate:bit_2_description = "Value is less than fail_min" ;
		qc_sample_flow_rate:bit_2_assessment = "Bad" ;
	float sample_flow_rate_std(time) ;
		sample_flow_rate_std:long_name = "Standard deviation of sample flow rate" ;
		sample_flow_rate_std:units = "cm^3/s" ;
		sample_flow_rate_std:missing_value = -9999.f ;
	float total_count(time) ;
		total_count:long_name = "Total number of raw counts" ;
		total_count:units = "count/s" ;
		total_count:missing_value = -9999.f ;
	float total_count_std(time) ;
		total_count_std:long_name = "Standard deviation of total number of raw counts" ;
		total_count_std:units = "count/s" ;
		total_count_std:missing_value = -9999.f ;
	float raw_bin_counts(time, diameter_optical) ;
		raw_bin_counts:long_name = "Raw counts in each bin" ;
		raw_bin_counts:units = "count/s" ;
		raw_bin_counts:missing_value = -9999.f ;
	float raw_bin_counts_std(time, diameter_optical) ;
		raw_bin_counts_std:long_name = "Standard deviation of raw counts in each bin" ;
		raw_bin_counts_std:units = "count/s" ;
		raw_bin_counts_std:missing_value = -9999.f ;
	float lat ;
		lat:long_name = "North latitude" ;
		lat:units = "degree_N" ;
		lat:valid_min = -90.f ;
		lat:valid_max = 90.f ;
		lat:standard_name = "latitude" ;
	float lon ;
		lon:long_name = "East longitude" ;
		lon:units = "degree_E" ;
		lon:valid_min = -180.f ;
		lon:valid_max = 180.f ;
		lon:standard_name = "longitude" ;
	float alt ;
		alt:long_name = "Altitude above mean sea level" ;
		alt:units = "m" ;
		alt:standard_name = "altitude" ;

// global attributes:
		:command_line = "pops1m -s crg -f S3 --max-runtime 0" ;
		:Conventions = "ARM-1.3" ;
		:process_version = "ingest-pops1m-1.0-0.el9" ;
		:dod_version = "pops1m-b1-1.0" ;
		:input_datastreams = "crgpopsS3.a1 : 1.0 : 20250629.000000" ;
		:site_id = "crg" ;
		:platform_id = "pops1m" ;
		:facility_id = "S3" ;
		:data_level = "b1" ;
		:location_description = "Coast-Urban-Rural Atmospheric Gradient Experiment (CoURAGE), Baltimore, Maryland" ;
		:datastream = "crgpops1mS3.b1" ;
		:sampling_interval = "1 second" ;
		:averaging_interval = "1 minute" ;
		:doi = "10.5439/2405212" ;
		:history = "created by user armflowprod on machine prod-slurmnode2.adc.arm.gov at 2025-06-29 02:13:01, using ingest-pops1m-1.0-0.el9" ;
}
